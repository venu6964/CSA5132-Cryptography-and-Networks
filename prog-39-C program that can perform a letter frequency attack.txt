#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26
#define NUM_TOP_PLAINTEXTS 10

// English letter frequency
const float english_frequency[] = {0.0817, 0.0149, 0.0278, 0.0425, 0.1270, 0.0223, 0.0202,
                                    0.0609, 0.0697, 0.0015, 0.0077, 0.0402, 0.0241, 0.0675,
                                    0.0751, 0.0193, 0.0010, 0.0599, 0.0633, 0.0906, 0.0276,
                                    0.0098, 0.0236, 0.0015, 0.0197, 0.0007};

// Function to calculate the chi-squared statistic
float chi_squared_statistic(const int *observed, const float *expected) {
    float chi_sq = 0;
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        chi_sq += ((observed[i] - expected[i]) * (observed[i] - expected[i])) / expected[i];
    }
    return chi_sq;
}

// Function to decrypt ciphertext using the given key
void decrypt(const char *ciphertext, char *plaintext, int key) {
    int len = strlen(ciphertext);
    for (int i = 0; i < len; i++) {
        if (isalpha(ciphertext[i])) {
            char base = isupper(ciphertext[i]) ? 'A' : 'a';
            plaintext[i] = ((ciphertext[i] - base - key) + ALPHABET_SIZE) % ALPHABET_SIZE + base;
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[len] = '\0';
}

// Function to count letter frequencies in the text
void count_letter_frequencies(const char *text, int *frequency) {
    int len = strlen(text);
    for (int i = 0; i < len; i++) {
        if (isalpha(text[i])) {
            frequency[toupper(text[i]) - 'A']++;
        }
    }
}

int main() {
    const char *ciphertext = "Uifsf jt b tfdsfu dbudifs"; // Example ciphertext
    int frequency[ALPHABET_SIZE] = {0};
    char plaintext[strlen(ciphertext) + 1];
    float chi_squared;
    int top = NUM_TOP_PLAINTEXTS; // Number of top possible plaintexts to display

    // Count letter frequencies in the ciphertext
    count_letter_frequencies(ciphertext, frequency);

    // Attempt all possible keys
    for (int key = 0; key < ALPHABET_SIZE; key++) {
        // Decrypt using the current key
        decrypt(ciphertext, plaintext, key);

        // Calculate chi-squared statistic
        chi_squared = chi_squared_statistic(frequency, english_frequency);

        // Print key, plaintext, and chi-squared statistic
        printf("Key: %d, Plaintext: %s, Chi-Squared: %.2f\n", key, plaintext, chi_squared);
    }

    return 0;
}
